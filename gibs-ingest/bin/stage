#!/bin/bash

set -e

version=v0.0.2
progname=$(basename $0)
docstr="$progname $version: Build and stage data necessary for deployment"

usage() {
echo "Usage:
  $progname bucket region subnet

Options:
  bucket The uri of the bucket used to hold configuration
  region The AWS region for deployment
  subnet The subnet in which to deploy

Examples:
  $progname s3://gitc-somebucket-deploy us-west-2 ***REMOVED***"
}

function echoerr() {
    echo "Error: $@" 1>&2;
}

if [ "$#" -ne 3 ]; then
    echo "$docstr"
    echo
    usage
    exit 1
fi

deployment_bucket=$1
region=$2
subnet=$3
bucket_name=${deployment_bucket:5}
bucket_prefix=${bucket_name%'deploy'}

echo "Staging for subnet $subnet"

rm -rf build
mkdir -p build/lambda
artifact_hash=$(find dist -type f | xargs $hashcmd | $hashcmd | awk '{print $1}')

# Work around problem in NGAP deployment where files are zipped with inadequate permissions
# for Lambda
find dist -exec chmod a+r {} \;
find dist -type d -exec chmod a+x {} \;

rm -rf build
mkdir -p build/lambda
artifact_hash=$(find dist -type f ! -name artifact_hash | xargs shasum | shasum | awk '{print $1}')

echo $artifact_hash > dist/artifact_hash

cd dist
for file in *
do
    zip -r ../build/lambda/$(basename $file .js) $file
done
rm -f generate-mrf/templates/runtime_config.json
cd ..


cd build
aws s3 cp --recursive . "$deployment_bucket/$artifact_hash/"
cd ..

stack_name=$stack_name subnet=$subnet erb config/cloudformation.yml.erb > config/cloudformation.yml
aws s3 cp --recursive config/ "$deployment_bucket/ingest/"
