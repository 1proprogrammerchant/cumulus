#!/bin/bash

set -e

version=v0.0.1
progname=$(basename $0)
docstr="$progname $version: Builds and deploys an ingest workflow via CloudFormation"

usage() {
echo "Usage:
  $progname [--create] [--no-compile] [--vpc=vpc] [--subnet=subnet] [--region=region] [--ngap] [--cycle-ecs] id keyname

Options:
  id              The id to use to identify the cloudformation template
  keyname         The name of the key used to log into instances
  --create             Create a new stack
  --no-compile         Do not compile Javascript before deploying (useful in dev with npm start)
  --vpc=vpc            Set the deployment VPC to vpc. (default: region's default VPC)
  --subnet=subnet      Deploy instances into subnet (default: the VPC's default subnet)
  --region=region      Deploy into the given region (default: us-west-2)
  --ngap               Set default VPC and subnet values for deploying into NGAP
  --cycle-ecs          Restart ECS services after deploying
  --no-stack           Do not install the cloudformation stack
  --no-simulate-iam    Do not simulate NGAP IAM Roles (default for NGAP deployment)

Examples:
  $progname --create myid mykeyname"
}

function echoerr() {
    echo "Error: $@" 1>&2;
}

operation=update
compile=true
cycle=false
region=us-west-2
prefix="gitc-"
stack=true
args=()
simulate_iam=true

while [[ $# -gt 0 ]]
do

    key="$1"

    if [[ $key == -* ]]; then
        # Dash argument
        case $key in
            --create)
                operation=create
                ;;
            --no-compile|--push)
                compile=false
                ;;
            --compile)
                compile=true
                ;;
            --no-stack)
                stack=false
                ;;
            --no-simulate-iam)
                simulate_iam=false
                ;;
            --ngap)
                # For us-west-2
                # region=us-west-2
                #default_vpc=${default_vpc:-***REMOVED***}
                #subnet=${subnet:-***REMOVED***}
                # For us-east-1
                region=us-east-1
                default_vpc=${default_vpc:-***REMOVED***}
                subnet=${subnet:-***REMOVED***}
                prefix="gsfc-ngap-"
                simulate_iam=false
                ;;
            --vpc)
                default_vpc="$2"
                shift
                ;;
            --subnet)
                default_subnet="$2"
                shift
                ;;
            --region)
                region="$2"
                shift
                ;;
            --cycle-ecs)
                cycle=true
                ;;
            --help)
                echo "$docstr"
                echo
                usage
                exit 0
                ;;
            *)
                echoerr "Unknown option: $key"
                exit 2
                ;;
        esac
    else
        # Positional argument
        args+=("$key")
    fi
    shift
done

if [ "${#args[@]}" -ne 2 ]; then
    echo "$docstr"
    echo
    usage
    exit 1
fi

stack_basename=${args[0]}
keyname=${args[1]}

AWS_CONFIG_FILE=${AWS_CONFIG_FILE:-~/.aws/config}
AWS_DEFAULT_PROFILE=${AWS_DEFAULT_PROFILE:-default}
profile=default
stack_name="${prefix}${stack_basename}"
deployment_bucket_name="${stack_name}-deploy"
public_bucket="s3://${stack_name}-public"
private_bucket="s3://${stack_name}-private"
deployment_bucket="s3://$deployment_bucket_name"

root=`pwd`;

if [[ ${simulate_iam} == "true" ]]; then
    echo "Updating stack for deployer IAM role"
    profile=cf-sim-$stack_name
    deployer_stack_name="${stack_name}-deployer"

    set +e
    op=update
    aws cloudformation "describe-stacks" \
        --region "$region" \
        --stack-name "$deployer_stack_name" 2>&1 > /dev/null
    if [ $? -ne 0 ]; then
        op=create
    fi
    sm_prefix="$(printf $prefix | tr -C '[:alnum:]' x)xx"
    out=$((aws cloudformation "$op-stack" \
               --region "$region" \
               --stack-name "$deployer_stack_name" \
               --template-body "file:///$(pwd)/config/deployer_cloudformation.yml" \
               --parameters "ParameterKey=Prefix,ParameterValue=$prefix,UsePreviousValue=false" \
                            "ParameterKey=StateMachinePrefix,ParameterValue=$sm_prefix,UsePreviousValue=false" \
               --capabilities CAPABILITY_IAM) 2>&1)
    result=$?
    set -e
    if [ $result -ne 0 ]; then
        if [ "$out" != $'\nAn error occurred (ValidationError) when calling the UpdateStack operation: No updates are to be performed.' ]; then
            echo $out
            exit $result
        fi
    else
        aws cloudformation wait "stack-$op-complete" \
            --region "$region" \
            --stack-name "$deployer_stack_name"

        sed -i '' "/^\[profile ${profile}\]$/,/^\[/d" $AWS_CONFIG_FILE

        deploy_arn=$(aws cloudformation describe-stacks \
                         --region "$region" \
                         --stack-name "$deployer_stack_name" \
                         --output text |
                            grep OUTPUTS |
                            awk '{print $NF}')


        printf "[profile $profile]\nrole_arn = $deploy_arn\nsource_profile = $AWS_DEFAULT_PROFILE\n" >> ~/.aws/config
        export AWS_DEFAULT_PROFILE=$profile
    fi
    echo "Deployer IAM update complete"
fi

if [ -z "$default_vpc" ]; then
   default_vpc=$(aws ec2 describe-vpcs --region="$region" --filters Name=isDefault,Values=true |
                     grep VpcId |
                     awk '{print $2}' |
                     sed s/[,\"]//g)
fi


if [[ ${operation} == "create" ]]; then
    aws s3 mb "$deployment_bucket" --region "$region" || true
    #aws s3 mb "$private_bucket" --region "$region" || true
    aws s3 mb "$public_bucket" --region "$region" || true

    set -e
    aws cloudformation delete-stack --region us-west-2 --stack-name foobar
    set +e
fi

if [[ ${compile} == "true" ]]; then
    npm install --unsafe-perm # unsafe-perm needed for Bamboo docker deployment
fi

if [ -f config/authorized_keys ]; then
    authorized_keys=$(cat config/authorized_keys | tr '\n' ',' | sed 's/,$//')
else
    echo
    echo 'Error: config/authorized_keys needs to be created to grant access to EC2 instances' 1>&2
    echo
    echo 'For a sensible default, run: scp gitc-bastion-host:.ssh/authorized_keys config/authorized_keys'
    echo 'For a private instance, simply copy your public key to config/authorized_keys'
    exit 1
fi

hashcmd=$(command -v shasum || command -v sha1sum)

rm -rf build
mkdir -p build/lambda
artifact_hash=$(find dist -type f | xargs $hashcmd | $hashcmd | awk '{print $1}')

# Work around problem in NGAP deployment where files are zipped with inadequate permissions
# for Lambda
find dist -exec chmod a+r {} \;
find dist -type d -exec chmod a+x {} \;

cd dist

for file in *
do
    zip -r ../build/lambda/$(basename $file .js) $file
done
cd $root

cd build

aws s3 cp --recursive . "$deployment_bucket/$artifact_hash/"
cd ..

stack_name=$stack_name subnet=$subnet erb config/cloudformation.yml.erb > config/cloudformation.yml
aws s3 cp --recursive config/ "$deployment_bucket/ingest/"

function cloudformation() {
    op=$1
    set +e
    out=$((aws cloudformation "$op-stack" \
               --region "$region" \
               --stack-name "$stack_name" \
               --template-body "file:///$(pwd)/config/cloudformation.yml" \
               --parameters "ParameterKey=ConfigS3Bucket,ParameterValue=$deployment_bucket_name,UsePreviousValue=false" \
                     "ParameterKey=IngestKeyName,ParameterValue=$keyname,UsePreviousValue=false" \
                     "ParameterKey=ArtifactPath,ParameterValue=$artifact_hash,UsePreviousValue=false" \
                     "ParameterKey=IngestInstanceType,ParameterValue=m4.large,UsePreviousValue=false" \
                     "ParameterKey=AuthorizedKeys,ParameterValue=\"$authorized_keys\",UsePreviousValue=false" \
                     "ParameterKey=DeployRegion,ParameterValue=$region,UsePreviousValue=false" \
                     "ParameterKey=StackName,ParameterValue=$stack_name,UsePreviousValue=false" \
                     "ParameterKey=VPC,ParameterValue=$default_vpc,UsePreviousValue=false" \
               --capabilities CAPABILITY_IAM) 2>&1)

    result=$?
    set -e
    echo $out
    if [ $result -ne 0 ]; then
        if [ "$out" != $'\nAn error occurred (ValidationError) when calling the UpdateStack operation: No updates are to be performed.' ]; then
            exit $result
        fi
    fi

    aws cloudformation wait "stack-$op-complete" \
        --region "$region" \
        --stack-name "$stack_name"
}

if [[ ${stack} == "true" ]]; then
    cloudformation $operation
fi

if [[ ${cycle} == "true" ]]; then
    cluster=$(aws cloudformation \
                  describe-stack-resource \
                  --region $region \
                  --output text \
                  --stack-name $stack_name \
                  --logical-resource-id IngestECSCluster |
                     tail -n 1 |
                     awk '{ print $1 }')
    tasks=($(aws ecs list-tasks \
                 --region $region \
                 --output text \
                 --cluster="$cluster" |
                    awk '{ print $2 }'))
    for task in ${tasks[@]}; do
        aws ecs stop-task \
            --region $region \
            --output text \
            --cluster "$cluster" \
            --task "$task"
    done
fi

echo "Deployed at $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

#aws cloudformation describe-stacks --region="$region" --stack-name=$stack_name | jq -r .Stacks[0].Outputs[].OutputValue
