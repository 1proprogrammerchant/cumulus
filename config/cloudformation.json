{
  "Description" : "GIBS-in-the-Cloud - Ingest",
  "Parameters" : {
    "DeploymentS3Bucket" : {
      "Type" : "String",
      "Description" : "S3 bucket that holds deployment artifacts"
    },
    "MRFS3Bucket" : {
      "Type" : "String",
      "Description" : "S3 bucket that holds output from mrfgen"
    },
    "StackName" : {
      "Type" : "String",
      "Description" : "Name of the (parent) stack name being created"
    },
    "IngestKeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to ingest ECS instances."
    },
    "AuthorizedKeys": {
      "Type": "CommaDelimitedList",
      "Description": "Comma-delimited list of SSH keys to authorize on EC2 instances."
    },
    "IngestDesiredInstances": {
      "Type": "Number",
      "Default" : "1",
      "Description": "Number of instances to launch in the ingest ECS cluster."
    },
    "IngestMaxInstances": {
      "Type": "Number",
      "Default" : "5",
      "Description": "Maximum number of instances in the ingest ECS cluster."
    },
    "IngestInstanceType" : {
      "Description" : "The EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "t2.large", "m4.large" ]
    },
    "ArtifactPath" : {
      "Type" : "String",
      "Description" : "Path within the deployment bucket containing artifacts"
    }
  },

  "Resources" : {
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "lambda.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LambdaExecutionRolePolicy",
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "DeploymentS3Bucket" } ] ] },
                    { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "DeploymentS3Bucket" }, "/*" ] ] },
                    { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "MRFS3Bucket" } ] ] },
                    { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "MRFS3Bucket" }, "/*" ] ] },
                    { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "StackName" } ] ] },
                    { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "StackName" }, "/*" ] ] }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                    "lambda:invokeFunction",
                    "sqs:SendMessage",
                    "sqs:ReceiveMessage",
                    "sqs:ChangeMessageVisibility",
                    "sqs:DeleteMessage",
                    "ecs:ListClusters",
                    "ecs:ListTasks",
                    "ecs:ListTaskDefinitions",
                    "ecs:RunTask",
	                  "dynamodb:PutItem",
	                  "dynamodb:DeleteItem",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },

    "HttpTileIngestNeededQueue" : {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {"Fn::Join" : [ "-", [ { "Ref": "StackName" }, "http-tile-ingest-needed-events" ] ]},
        "ReceiveMessageWaitTimeSeconds": 20,
        "RedrivePolicy": {
          "deadLetterTargetArn" : {"Fn::GetAtt": ["FailedEventQueue", "Arn"]},
          "maxReceiveCount" : 1
        },
        "VisibilityTimeout": 350
      }
    },

    "CmrIngestNeededQueue" : {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {"Fn::Join" : [ "-", [ { "Ref": "StackName" }, "cmr-ingest-needed-events" ] ]},
        "ReceiveMessageWaitTimeSeconds": 20,
        "RedrivePolicy": {
          "deadLetterTargetArn" : {"Fn::GetAtt": ["FailedEventQueue", "Arn"]},
          "maxReceiveCount" : 1
        },
        "VisibilityTimeout": 350
      }
    },

    "WmsMapFoundQueue" : {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {"Fn::Join" : [ "-", [ { "Ref": "StackName" }, "wms-map-found-events" ] ]},
        "ReceiveMessageWaitTimeSeconds": 20,
        "RedrivePolicy": {
          "deadLetterTargetArn" : {"Fn::GetAtt": ["FailedEventQueue", "Arn"]},
          "maxReceiveCount" : 1
        },
        "VisibilityTimeout": 350
      }
    },

    "ResourceUrlsFoundQueue" : {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {"Fn::Join" : [ "-", [ { "Ref": "StackName" }, "resource-urls-found-events" ] ]},
        "ReceiveMessageWaitTimeSeconds": 20,
        "RedrivePolicy": {
          "deadLetterTargetArn" : {"Fn::GetAtt": ["FailedEventQueue", "Arn"]},
          "maxReceiveCount" : 1
        },
        "VisibilityTimeout": 350
      }
    },

    "SyncCompletedQueue" : {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {"Fn::Join" : [ "-", [ { "Ref": "StackName" }, "sync-completed-events" ] ]},
        "ReceiveMessageWaitTimeSeconds": 20,
        "RedrivePolicy": {
          "deadLetterTargetArn" : {"Fn::GetAtt": ["FailedEventQueue", "Arn"]},
          "maxReceiveCount" : 30
        },
        "VisibilityTimeout": 30
      }
    },

    "PendingMrfGenQueue" : {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {"Fn::Join" : [ "-", [ { "Ref": "StackName" }, "pending-mrf-gen-events" ] ]},
        "ReceiveMessageWaitTimeSeconds": 20,
        "RedrivePolicy": {
          "deadLetterTargetArn" : {"Fn::GetAtt": ["FailedEventQueue", "Arn"]},
          "maxReceiveCount" : 30
        },
        "VisibilityTimeout": 1200
      }
    },

    "FailedEventQueue" : {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {"Fn::Join" : [ "-", [ { "Ref": "StackName" }, "failed-events" ] ]}
      }
    },

    "DiscoverHttpTilesFn" : {
      "Type" : "AWS::Lambda::Function",
      "DependsOn": ["IngestECSServiceRole"],
      "Properties" : {
        "FunctionName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "task-discover-http-tiles"]]},
        "Code" : {
          "S3Bucket" : { "Ref" : "DeploymentS3Bucket" },
          "S3Key" : {"Fn::Join" : ["/", [{ "Ref" : "ArtifactPath" }, "lambda/discover-http-tiles.zip"]]}
        },
        "Description" : "Discovers tile files to ingest from HTTP",
        "Runtime" : "nodejs4.3",
        "Timeout" : 300,
        "MemorySize" : 256,
        "Handler" : "discover-http-tiles.handler",
        "Role" : { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
      }
    },

    "DiscoverCmrGranulesFn" : {
      "Type" : "AWS::Lambda::Function",
      "DependsOn": ["IngestECSServiceRole"],
      "Properties" : {
        "FunctionName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "task-discover-cmr-granules"]]},
        "Code" : {
          "S3Bucket" : { "Ref" : "DeploymentS3Bucket" },
          "S3Key" : {"Fn::Join" : ["/", [{ "Ref" : "ArtifactPath" }, "lambda/discover-cmr-granules.zip"]]}
        },
        "Description" : "Discovers tile files to ingest from HTTP",
        "Runtime" : "nodejs4.3",
        "Timeout" : 300,
        "MemorySize" : 256,
        "Handler" : "discover-cmr-granules.handler",
        "Role" : { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
      }
    },

    "SyncHttpUrlsFn" : {
      "Type" : "AWS::Lambda::Function",
      "DependsOn": ["IngestECSServiceRole"],
      "Properties" : {
        "FunctionName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "task-sync-http-urls"]]},
        "Code" : {
          "S3Bucket" : { "Ref" : "DeploymentS3Bucket" },
          "S3Key" : {"Fn::Join" : ["/", [{ "Ref" : "ArtifactPath" }, "lambda/sync-http-urls.zip"]]}
        },
        "Description" : "Synchronizes HTTP files to S3",
        "Runtime" : "nodejs4.3",
        "Timeout" : 300,
        "MemorySize" : 256,
        "Handler" : "sync-http-urls.handler",
        "Role" : { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
      }
    },

    "SyncWmsFn" : {
      "Type" : "AWS::Lambda::Function",
      "DependsOn": ["IngestECSServiceRole"],
      "Properties" : {
        "FunctionName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "task-sync-wms"]]},
        "Code" : {
          "S3Bucket" : { "Ref" : "DeploymentS3Bucket" },
          "S3Key" : {"Fn::Join" : ["/", [{ "Ref" : "ArtifactPath" }, "lambda/sync-wms.zip"]]}
        },
        "Description" : "Synchronizes HTTP files to S3",
        "Runtime" : "nodejs4.3",
        "Timeout" : 300,
        "MemorySize" : 256,
        "Handler" : "sync-wms.handler",
        "Role" : { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
      }
    },

    "GenerateMrfFn" : {
      "Type" : "AWS::Lambda::Function",
      "DependsOn": ["IngestECSServiceRole"],
      "Properties" : {
        "FunctionName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "task-generate-mrf"]]},
        "Code" : {
          "S3Bucket" : { "Ref" : "DeploymentS3Bucket" },
          "S3Key" : {"Fn::Join" : ["/", [{ "Ref" : "ArtifactPath" }, "lambda/generate-mrf.zip"]]}
        },
        "Description" : "Generates an MRF from imported files",
        "Runtime" : "nodejs4.3",
        "Timeout" : 300,
        "MemorySize" : 128,
        "Handler" : "generate-mrf.handler",
        "Role" : { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
      }
    },

    "DispatcherFn" : {
      "Type" : "AWS::Lambda::Function",
      "DependsOn": ["IngestECSServiceRole"],
      "Properties" : {
        "FunctionName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "dispatcher"]]},
        "Code" : {
          "S3Bucket" : { "Ref" : "DeploymentS3Bucket" },
          "S3Key" : {"Fn::Join" : ["/", [{ "Ref" : "ArtifactPath" }, "lambda/dispatcher.zip"]]}
        },
        "Description" : "Dispatches events from SQS (runs as ECS service)",
        "Runtime" : "nodejs4.3",
        "Timeout" : 10,
        "MemorySize" : 256,
        "Handler" : "dispatcher.handler",
        "Role" : { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
      }
    },

    "SchedulerFn" : {
      "Type" : "AWS::Lambda::Function",
      "DependsOn": ["IngestECSServiceRole"],
      "Properties" : {
        "FunctionName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "scheduler"]]},
        "Code" : {
          "S3Bucket" : { "Ref" : "DeploymentS3Bucket" },
          "S3Key" : {"Fn::Join" : ["/", [{ "Ref" : "ArtifactPath" }, "lambda/scheduler.zip"]]}
        },
        "Description" : "Runs scheduled ingests",
        "Runtime" : "nodejs4.3",
        "Timeout" : 10,
        "MemorySize" : 256,
        "Handler" : "scheduler.handler",
        "Role" : { "Fn::GetAtt" : [ "LambdaExecutionRole", "Arn" ] }
      }
    },

    "LockTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [ { "AttributeName" : "key", "AttributeType" : "S" } ],
        "KeySchema" : [ { "AttributeName" : "key", "KeyType" : "HASH" } ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : 1,
          "WriteCapacityUnits" : 1
        },
        "TableName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "locks"]]}
      }
    },

    "IngestECSCluster": {
      "Type": "AWS::ECS::Cluster"
    },

    "IngestTaskVPC": {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "Tags" : [ { "Key" : "project", "Value" : "gitc" } ]
      }
    },

    "IngestSubnet": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "CidrBlock" : { "Fn::GetAtt" : ["IngestTaskVPC", "CidrBlock"] },
        "MapPublicIpOnLaunch" : true,
        "Tags" : [ { "Key" : "project", "Value" : "gitc" } ],
        "VpcId" : { "Ref" : "IngestTaskVPC" }
      }
    },

    "LambdaRunnerLogs": {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "lambda-runner"]]}
      }
    },

    "LambdaRunnerTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties" : {
        "ContainerDefinitions" : [
          {
            "Name": "ecs-lambda-runner",
            "Cpu": "10",
            "Essential": "true",
            "Image": {"Fn::Join": ["", [{"Ref": "AWS::AccountId"}, ".dkr.ecr.us-west-2.amazonaws.com/gitcdev/ecs-lambda-runner:latest"]]},
            "Memory": "1024",
            "Essential": true,
            "LogConfiguration": {
                "LogDriver": "awslogs",
                "Options": {
                  "awslogs-group": { "Ref": "LambdaRunnerLogs" },
                  "awslogs-region": "us-west-2"
                }
            }
          }
        ]
      }
    },

    "DispatcherLogs": {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "service-dispatcher-ecs"]]}
      }
    },

    "SchedulerLogs": {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "service-scheduler-ecs"]]}
      }
    },

    "GenerateMrfLogs": {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "task-generate-mrf-ecs"]]}
      }
    },

    "TransactionLogs": {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {"Fn::Join" : ["-", [{ "Ref" : "StackName" }, "transactions"]]}
      }
    },

    "DispatcherTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties" : {
        "ContainerDefinitions" : [
          {
            "Name": "dispatcher",
            "Command" : [
              {"Fn::GetAtt": ["DispatcherFn", "Arn"]},
              "--eventJson",
              {"Fn::Join": ["", [
                "{",
                "  \"prefix\":\"",{"Ref": "StackName"},"\",",
                "  \"bucket\":\"",{"Ref": "StackName"},"\",",
                "  \"events\":{",
                "    \"Key\":\"ingest/events.json\",",
                "    \"Bucket\":\"",{ "Ref" : "DeploymentS3Bucket" },"\"",
                "  }",
                "}"
              ]]}
            ],
            "Cpu": "10",
            "Essential": "true",
            "Image": {"Fn::Join": ["", [{"Ref": "AWS::AccountId"}, ".dkr.ecr.us-west-2.amazonaws.com/gitcdev/ecs-lambda-runner:latest"]]},
            "Memory": "256",
            "Essential": true,
            "LogConfiguration": {
                "LogDriver": "awslogs",
                "Options": {
                  "awslogs-group": { "Ref": "DispatcherLogs" },
                  "awslogs-region": "us-west-2"
                }
            }
          }
        ]
      }
    },

    "SchedulerTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties" : {
        "ContainerDefinitions" : [
          {
            "Name": "scheduler",
            "Command" : [
              {"Fn::GetAtt": ["SchedulerFn", "Arn"]},
              "--eventJson",
              {"Fn::Join": ["", [
                "{",
                "  \"prefix\":\"",{"Ref": "StackName"},"\",",
                "  \"bucket\":\"",{"Ref": "StackName"},"\",",
                "  \"mrf_bucket\":\"",{ "Ref" : "MRFS3Bucket" },"\",",
                "  \"products\":{",
                "    \"Key\":\"ingest/products.json\",",
                "    \"Bucket\":\"",{ "Ref" : "DeploymentS3Bucket" },"\"",
                "  }",
                "}"
              ]]}
            ],
            "Cpu": "10",
            "Essential": "true",
            "Image": {"Fn::Join": ["", [{"Ref": "AWS::AccountId"}, ".dkr.ecr.us-west-2.amazonaws.com/gitcdev/ecs-lambda-runner:latest"]]},
            "Memory": "256",
            "Essential": true,
            "LogConfiguration": {
                "LogDriver": "awslogs",
                "Options": {
                  "awslogs-group": { "Ref": "SchedulerLogs" },
                  "awslogs-region": "us-west-2"
                }
            }
          }
        ]
      }
    },

    "GenerateMrfTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties" : {
        "ContainerDefinitions" : [
          {
            "Name": "generate-mrf",
            "Command" : [
              { "Fn::GetAtt": ["GenerateMrfFn", "Arn"] },
              "--queue",
              { "Ref" : "PendingMrfGenQueue" },
              "--prefix",
              { "Ref" : "StackName" },
              "--bucket",
              { "Ref" : "StackName" }
            ],
            "Cpu": "512",
            "Essential": "true",
            "Image": {"Fn::Join": ["", [{"Ref": "AWS::AccountId"}, ".dkr.ecr.us-west-2.amazonaws.com/gitcdev/ecs-lambda-runner:latest"]]},
            "Memory": "2048",
            "Essential": true,
            "LogConfiguration": {
                "LogDriver": "awslogs",
                "Options": {
                  "awslogs-group": { "Ref": "GenerateMrfLogs" },
                  "awslogs-region": "us-west-2"
                }
            }
          }
        ]
      }
    },


    "IngestECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "DependsOn": ["LambdaExecutionRole"],
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "gitc-ingest-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetAuthorizationToken",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "IngestEC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "gitc-ingest-ec2",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:ListBucket",
                    "s3:ListObjects"
                  ],
                  "Resource": [
                    { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "DeploymentS3Bucket" } ] ] },
                    { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "DeploymentS3Bucket" }, "/*" ] ] },
                    { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "MRFS3Bucket" } ] ] },
                    { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "MRFS3Bucket" }, "/*" ] ] },
                    { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "StackName" } ] ] },
                    { "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "StackName" }, "/*" ] ] }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetAuthorizationToken",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "lambda:GetFunction",
                    "lambda:invokeFunction",
                    "sqs:SendMessage",
                    "sqs:ReceiveMessage",
                    "sqs:ChangeMessageVisibility",
                    "sqs:DeleteMessage",
	                  "dynamodb:PutItem",
	                  "dynamodb:DeleteItem",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "IngestEC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          { "Ref": "IngestEC2Role" }
        ]
      }
    },
    "EventDispatcherService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": ["IngestECSAutoScalingGroup", "DispatcherFn"],
      "Properties" : {
        "Cluster": {"Ref": "IngestECSCluster"},
        "DesiredCount": "1",
        "TaskDefinition" : {"Ref":"DispatcherTask"}
      }
    },
    "SchedulerService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": ["IngestECSAutoScalingGroup", "SchedulerFn"],
      "Properties" : {
        "Cluster": {"Ref": "IngestECSCluster"},
        "DesiredCount": "1",
        "TaskDefinition" : {"Ref":"SchedulerTask"}
      }
    },
    "MrfGenerationService": {
      "Type": "AWS::ECS::Service",
      "DependsOn": ["IngestECSAutoScalingGroup", "GenerateMrfFn"],
      "Properties" : {
        "Cluster": {"Ref": "IngestECSCluster"},
        "DesiredCount": "2",
        "TaskDefinition" : {"Ref":"GenerateMrfTask"},
        "DeploymentConfiguration": {
          "MaximumPercent" : 100,
          "MinimumHealthyPercent" : 0
        }
      }
    },
    "IngestECSAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
            "MinInstancesInService": 0
        }
      },
      "Properties" : {
        "VPCZoneIdentifier" : [ { "Ref" : "IngestSubnet" } ],
        "LaunchConfigurationName" : { "Ref" : "IngestContainerInstanceLaunch" },
        "MinSize" : "0",
        "MaxSize" : { "Ref" : "IngestMaxInstances" },
        "DesiredCapacity" : { "Ref" : "IngestDesiredInstances" },
        "Tags" : [{
          "Key" : "Name",
          "Value" : { "Fn::Join" : [" ", [ { "Ref" : "StackName" }, "Ingest ECS" ] ] },
          "PropagateAtLaunch" : true
        }]
      }
    },
    "IngestContainerInstanceLaunch": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "commands" : {
              "01_add_instance_to_cluster" : {
                "command" : { "Fn::Join": [ "", [ "#!/bin/bash\n", "echo ECS_CLUSTER=", { "Ref": "IngestECSCluster" }, " >> /etc/ecs/ecs.config" ] ] }
              }
            },

            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.IngestContainerInstanceLaunch.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource IngestContainerInstanceLaunch ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true", "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          }
        }
      },
      "Properties": {
        "SecurityGroups": [ { "Ref" : "IngestECSSecurityGroup" } ],
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionToAMI", { "Ref" : "AWS::Region" }, "AMIID" ] },
        "InstanceType"   : { "Ref" : "IngestInstanceType" },
        "IamInstanceProfile": { "Ref": "IngestEC2InstanceProfile" },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdcz",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": 100
            }
          }
        ],
        "KeyName"        : { "Ref" : "IngestKeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#cloud-config\n",
          "ssh_authorized_keys:\n",
          " - ", { "Fn::Join": ["\n - ", { "Ref" : "AuthorizedKeys" } ] }, "\n",
          "runcmd:\n",
          " - yum install -y aws-cfn-bootstrap\n",

          " - /opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource IngestContainerInstanceLaunch ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",

          " - /opt/aws/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource IngestECSAutoScalingGroup ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },

    "IngestInternetGateway": {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
      }
    },

    "IngestGatewayAttachment": {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "InternetGatewayId": { "Ref": "IngestInternetGateway" },
        "VpcId": { "Ref": "IngestTaskVPC" }
      }
    },

    "IngestVPCRouteTable": {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref": "IngestTaskVPC" }
      }
    },

    "IngestInternetRoute": {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "IngestInternetGateway" },
        "RouteTableId" : { "Ref": "IngestVPCRouteTable" }
      }
    },

    "IngestRouteTableAssociation": {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref": "IngestVPCRouteTable" },
        "SubnetId" : { "Ref": "IngestSubnet" }
      }
    },

    "IngestECSSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "Security group for GITC ingest",
        "SecurityGroupEgress" : [
          {
            "IpProtocol" : "-1",
            "FromPort" : "-1",
            "ToPort" : "-1",
            "CidrIp" : "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          }
        ],
        "VpcId" : { "Ref": "IngestTaskVPC" }
      }
    }
  },

  "Mappings" : {
    "AWSRegionToAMI" : {
      "DOCS"           : { "LIST" : "http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html" },
      "us-west-2"      : { "AMIID" : "ami-241bd844" }
    }
  }
}
